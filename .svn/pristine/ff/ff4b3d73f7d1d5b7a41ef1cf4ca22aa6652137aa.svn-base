package kr.caincheon.church.admin;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import kr.caincheon.church.admin.serivce.CodeService;
import kr.caincheon.church.common.CommonController;
import kr.caincheon.church.common.CommonDaoDTO;
import kr.caincheon.church.common.CommonException;
import kr.caincheon.church.common.Const;
import kr.caincheon.church.common.Paging;

/**
 * 직급코드 관리 서비스를 제공하는 컨트롤러
 * @author benjamin
 */

@Controller
public class CommonCodeMgmtController extends CommonController
{

    private final Logger _logger = Logger.getLogger(getClass());
    
    @Resource(name="codeService")
    private CodeService codeService;
    
    /**
     * 코드관리 > 공통코드 관리
     * @param request
     * @return
     * @throws CommonException
     */
    @RequestMapping(value = "/admin/code/common_code_mgmt.do")
    public ModelAndView inquireCodeMastList(HttpServletRequest request) throws Exception
    {
    	ModelAndView mv = new ModelAndView("/admin/code/common_code_mgmt");
        
    	// request handling
        build(request);
        
        D(_logger, Thread.currentThread().getStackTrace(), "params = " + _params);
        
        // call a service component 
        codeService.selectCodes(_params);
        
        D(_logger, Thread.currentThread().getStackTrace(), _params.toString());
        
        // response handling
        java.util.List list  = (java.util.List)_params.remove(Const.ADM_MAPKEY_LIST);
        Integer total  = (Integer)_params.remove(Const.ADM_MAPKEY_COUNT);
        Paging  paging = (Paging)_params.remove(Const.ADM_MAPKEY_PAGING);
        
        mv.addObject("rtn_list",   list);
        mv.addObject("rtn_total",  total);
        mv.addObject("rtn_paging", paging);

        D(_logger, Thread.currentThread().getStackTrace(), mv.toString());
        D(_logger, Thread.currentThread().getStackTrace(), mv.getModelMap().toString());
        
        return mv;
    }

    /**
     * 코드관리 > 공통코드 관리 > 코드인스턴스관리
     * @param request
     * @return
     * @throws CommonException
     */
    @RequestMapping(value = "/admin/code/common_code_inst_mgmt.do")
    public ModelAndView inquireCodeInstList(HttpServletRequest request) throws Exception
    {
    	ModelAndView mv = new ModelAndView("/admin/code/common_code_inst_mgmt");
        
    	// request handling
        build(request);
        
        D(_logger, Thread.currentThread().getStackTrace(), "params = " + _params);
        
        // call a service component 
        CommonDaoDTO dto = codeService.selectCodeInstanceList(_params);
        
        // response handling
        mv.addObject("rtn_list",   dto.daoList);
        mv.addObject("rtn_total",  dto.daoTotalCount);
        mv.addObject("rtn_paging", dto.paging);

        D(_logger, Thread.currentThread().getStackTrace(), mv.toString());
        D(_logger, Thread.currentThread().getStackTrace(), mv.getModelMap().toString());
        
        return mv;
    }

    /**
     * 조직코드관리 > 직급코드관리 cud
     * @param request
     * @return
     * @throws CommonException
     */
    @RequestMapping(value = "/admin/code/common_code_mgmt_cud.do")
    public ModelAndView positionCodeCUD(HttpServletRequest request) throws Exception
    {
    	ModelAndView mv = new ModelAndView("/admin/code/common_code_mgmt");
        
    	// request handling
        build(request);
        
        D(_logger, Thread.currentThread().getStackTrace(), "params = " + _params);
        
        // call a service component
        codeService.iudCodeInstance(_params);
		CommonDaoDTO dto = codeService.selectCodeInstanceList(_params);
        
        // response handling
        mv.addObject("rtn_list",   dto.daoList);
        mv.addObject("rtn_paging", dto.paging);

        D(_logger, Thread.currentThread().getStackTrace(), mv.toString());
        D(_logger, Thread.currentThread().getStackTrace(), mv.getModelMap().toString());
        
        return mv;
    }

}